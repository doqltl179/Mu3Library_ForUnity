// 부드러운 보간 함수 (fade)
float fade(float t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// 해시값을 기반으로 한 그라디언트 계산 함수
float grad(int hash, float x, float y, float z)
{
    int h = hash & 15;
    float u = (h < 8) ? x : y;
    float v = (h < 4) ? y : ((h == 12 || h == 14) ? x : z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

// 간단한 정수 해시 함수 (3D 좌표 기반)
int hash3D(int x, int y, int z)
{
    int h = x * 374761393 + y * 668265263 + z * 15485863;
    h = (h ^ (h >> 13)) * 1274126177;
    return h;
}

// 3D Perlin Noise 함수
float perlinNoise3D(float3 pos)
{
    // 격자 좌표와 잔여 좌표 분리
    int X = (int) floor(pos.x);
    int Y = (int) floor(pos.y);
    int Z = (int) floor(pos.z);
    float3 f = pos - float3(X, Y, Z);
    
    // 보간 인자 계산
    float u = fade(f.x);
    float v = fade(f.y);
    float w = fade(f.z);
    
    // 각 격자 코너의 해시 값 계산
    int A = hash3D(X, Y, Z);
    int B = hash3D(X + 1, Y, Z);
    int C = hash3D(X, Y + 1, Z);
    int D = hash3D(X + 1, Y + 1, Z);
    int E = hash3D(X, Y, Z + 1);
    int F = hash3D(X + 1, Y, Z + 1);
    int G = hash3D(X, Y + 1, Z + 1);
    int H = hash3D(X + 1, Y + 1, Z + 1);
    
    // 각 코너에서의 그라디언트 기여도 계산
    float n000 = grad(A, f.x, f.y, f.z);
    float n100 = grad(B, f.x - 1, f.y, f.z);
    float n010 = grad(C, f.x, f.y - 1, f.z);
    float n110 = grad(D, f.x - 1, f.y - 1, f.z);
    float n001 = grad(E, f.x, f.y, f.z - 1);
    float n101 = grad(F, f.x - 1, f.y, f.z - 1);
    float n011 = grad(G, f.x, f.y - 1, f.z - 1);
    float n111 = grad(H, f.x - 1, f.y - 1, f.z - 1);
    
    // x축 방향 선형 보간
    float nx00 = lerp(n000, n100, u);
    float nx01 = lerp(n001, n101, u);
    float nx10 = lerp(n010, n110, u);
    float nx11 = lerp(n011, n111, u);
    
    // y축 방향 보간
    float nxy0 = lerp(nx00, nx10, v);
    float nxy1 = lerp(nx01, nx11, v);
    
    // z축 방향 최종 보간 후 값 반환
    return lerp(nxy0, nxy1, w);
}
