#pragma kernel March
#pragma kernel ShapeToCube

#define TableCornerCount 8

#include "MarchTables.compute"
#include "UtilFunc.compute"

static const int numThreads = 8;

// MarchingCubes 한 변에 들어가는 chunk의 개수
// 가로 == 세로 == 높이
uint chunkCount;

// 계산하려는 chunk의 index
uint3 chunkIndex;

// chunk 하나의 길이
// 가로 == 세로 == 높이
uint chunkSize;

// triangle을 형성하는 point의 weight 경계값
float pointWeightThreshold;

struct Triangle
{
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

RWStructuredBuffer<float> pointsWeight; // 반환되는 weight 값의 배열
AppendStructuredBuffer<Triangle> triangles;



float3 interpolateVerts(float3 v1, float3 v2, float w1, float w2)
{
    // 선형 보간 계산
    float t = (pointWeightThreshold - w1) / (w2 - w1);
    return lerp(v1, v2, t); // Lerp를 활용해 보간
}

[numthreads(numThreads, numThreads, numThreads)]
void March(uint3 id : SV_DispatchThreadID)
{
    //printf("DispatchThreadID: (%d, %d, %d)", id.x, id.y, id.z);
    
    if (id.x >= chunkSize || id.y >= chunkSize || id.z >= chunkSize)
    {
        return;
    }
    
    // 현재 cube의 point
    uint3 cornersIndex[TableCornerCount];
    for (int i = 0; i < TableCornerCount; i++)
    {
        cornersIndex[i] = id + CornersTable[i];
    }
    
    uint pointCount = chunkSize + 1;
    // cube 하나에 포함되어 있는 각 corner의 weight값
    float cubeCornersWeight[TableCornerCount];
    for (int i = 0; i < TableCornerCount; i++)
    {
        int pointIndex = idToPointIndex(cornersIndex[i], pointCount);
        cubeCornersWeight[i] = pointsWeight[pointIndex];
    }
    
    // 'MarchTables'의 triangle index 계산
    int configIndex = 0;
    for (int i = 0; i < TableCornerCount; i++)
    {
        if (cubeCornersWeight[i] >= pointWeightThreshold)
        {
            configIndex |= 1 << i;
        }
    }
    
    // Triangle 계산
    for (int i = 0; TrianglesTable[configIndex][i] != -1; i += 3)
    {
        Triangle tri;
        
        int e00 = TrianglesTable[configIndex][i + 0];
        int v00S = EdgesTable[e00][0];
        int v00E = EdgesTable[e00][1];
        tri.vertexA = interpolateVerts(cornersIndex[v00S], cornersIndex[v00E], cubeCornersWeight[v00S], cubeCornersWeight[v00E]);
        
        int e01 = TrianglesTable[configIndex][i + 1];
        int v01S = EdgesTable[e01][0];
        int v01E = EdgesTable[e01][1];
        tri.vertexB = interpolateVerts(cornersIndex[v01S], cornersIndex[v01E], cubeCornersWeight[v01S], cubeCornersWeight[v01E]);
        
        int e02 = TrianglesTable[configIndex][i + 2];
        int v02S = EdgesTable[e02][0];
        int v02E = EdgesTable[e02][1];
        tri.vertexC = interpolateVerts(cornersIndex[v02S], cornersIndex[v02E], cubeCornersWeight[v02S], cubeCornersWeight[v02E]);
        
        triangles.Append(tri);
    }
}




[numthreads(numThreads, numThreads, numThreads)]
void ShapeToCube(uint3 id : SV_DispatchThreadID)
{
    uint pointCount = chunkSize + 1;
    // cubeSize 변수를 그대로 사용해도 되지만 코드 이해를 돕기위해 의도적으로 선언
    uint pointIndexMax = chunkSize;
    if (id.x > pointIndexMax || id.y > pointIndexMax || id.z > pointIndexMax)
    {
        return;
    }
    
    uint pointIndex = idToPointIndex(id, pointCount);
    float weight = 0;
    
    if (chunkCount == 1)
    {
        if (id.x == 0 ||
            id.y == 0 ||
            id.z == 0 ||
            id.x == pointIndexMax ||
            id.y == pointIndexMax ||
            id.z == pointIndexMax)
        {
            weight = 1;
        }
    }
    else
    {
        uint chunkIndexMax = chunkCount - 1;
        if ((chunkIndex.x == 0 && id.x == 0) ||
            (chunkIndex.y == 0 && id.y == 0) ||
            (chunkIndex.z == 0 && id.z == 0) ||
            (chunkIndex.x == chunkIndexMax && id.x == pointIndexMax) ||
            (chunkIndex.y == chunkIndexMax && id.y == pointIndexMax) ||
            (chunkIndex.z == chunkIndexMax && id.z == pointIndexMax))
        {
            weight = 1;
        }
    }
    
    pointsWeight[pointIndex] = weight;
}